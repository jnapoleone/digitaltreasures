<?php
/**
 * @file
 * Module to associate images with menu items
 *
 * @author dylan@opensourcery.com
 */

/**
 * Implements hook_menu().
 */
function menu_images_menu() {
  $items['admin/config/user-interface/menu_images'] = array(
    'title' => 'Menu Image settings',
    'description' => 'Associates images with menu items',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('menu_images_admin_settings'),
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}

/**
 * Implements hook_theme_registry_alter()
 *   Override the nodehierarchy child links function.
 *
 * @param $theme_registry
 */
function menu_images_theme_registry_alter(&$theme_registry) {
  // Override the link theming functions to hide titles if so configured.
  if (variable_get('menu_images_hide_titles', FALSE)) {
    if (!empty($theme_registry['menu_link'])) {
      $theme_registry['menu_link']['function'] = 'menu_image_menu_link';
    }
    if (!empty($theme_registry['link'])) {
      $theme_registry['link']['function'] = 'menu_image_link';
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function menu_images_form_alter(&$form, $form_state, $form_id) {

  if ($form_id == 'menu_edit_item') {
    if (isset($form['mlid']['#value'])) {
      $options = unserialize(db_query('SELECT options FROM {menu_links} WHERE mlid = :mlid', array(':mlid' => $form['mlid']['#value']))->fetchField());
    }
    if (!isset($options) || !isset($options['menu_image'])) {
      $options = array('menu_image' => array('enable' => NULL, 'image_style' => NULL));
    }

    $form['image'] = array(
      '#type' => 'fieldset',
      '#weight' => 5,
      '#title' => t('Menu image settings'),
      '#description' => t('If checked, the following image will be used as background image for this menu item.'),
      '#attributes' => array('classes' => array('theme-settings-bottom')),
    );
    $form['image']['use_image_logo'] = array(
      '#type' => 'checkbox',
      '#title' => t('Use an image'),
      '#default_value' => $options['menu_image']['enable'],
      '#tree' => FALSE,
      '#description' => t('Check this if you want this image to be used.'),
    );

    $form['image']['image_style'] = array(
      '#title' => t('Image style'),
      '#type' => 'select',
      '#options' => image_style_options(FALSE),
      '#empty_option' => '<' . t('Menu Images default') . '>',
      '#default_value' => $options['menu_image']['image_style'],
      '#description' => t('The preview image will be shown while editing the content.'),
      '#required' => FALSE,
    );

    $form['image']['image_path'] = array(
      '#type' => 'textfield',
      '#title' => t('Path to the image'),
      '#default_value' => (isset($options['menu_image']['path']) ? $options['menu_image']['path'] : variable_get('menu_images_default_image', drupal_get_path('module', 'menu_images') . '/images/default_image.png')),
      '#description' => t('The path to the image you would like to use as a background image for this menu item.'),
    );
    $form['image']['image_path']['#states'] = array(
        'visible' => array (
        ':input[name="use_image_logo"]' => array('checked' => TRUE),
      ),
    );

    $form['image']['image_upload'] = array(
      '#type' => 'file',
      '#title' => t('Upload a new image image'),
      '#maxlength' => 40,
      '#description' => t("If you don't have direct file access to the server, use this field to upload your image."),
    );
    $form['image']['image_upload']['#states'] = array(
        'visible' => array (
        ':input[name="use_image_logo"]' => array('checked' => TRUE),
      ),
    );

    $form['submit']['#weight'] = 9;
    $form['delete']['#weight'] = 10;

    $form['#attributes']['enctype'] = 'multipart/form-data';
    $form['#submit'][] = 'menu_images_form_submit';
  }

  // Add a custom submit callback for image style forms.
  if (in_array($form_id, array('image_style_form', 'image_effect_form', 'image_style_revert_form', 'image_style_delete_form', 'menu_images_admin_settings'))) {
    $form['#submit'][] = 'menu_images_css_generate';
  }
}

/**
 * Process the submitted form
 *
 */
function menu_images_form_submit($form, &$form_state) {

  // Check the destination folder, attempt to create it if it does't exist
  $directory_path = menu_images_directory_path();
  file_prepare_directory($directory_path, FILE_CREATE_DIRECTORY);

  // Store the current image path
  $path = $form_state['values']['image_path'];

  // Define the validation settings
  $validate = array(
    'file_validate_is_image' => array(),
  );

  // Check for a new uploaded image, and use that instead.
  if ($file = file_save_upload('image_upload', $validate)) {
    $parts = pathinfo($file->filename);
    $filename = $directory_path . '/menu_image_' . $form_state['values']['mlid'] . '.' . $parts['extension'];
    file_unmanaged_copy($file->uri, $filename, FILE_EXISTS_REPLACE);

    // Flush image style generated images
    image_path_flush($filename);

    $path = $filename;
  }

  $options = unserialize(db_query('SELECT options FROM {menu_links} WHERE mlid = :mlid', array(':mlid' => $form_state['values']['mlid']))->fetchField());
  $options['menu_image'] = array(
    'enable' => $form_state['values']['use_image_logo'],
    'path' => $path,
    'image_style' => $form_state['values']['image_style'],
  );

  // Use default image style if not explicitly set.
  if (empty($options['menu_image']['image_style'])) {
    $options['menu_image']['image_style'] = variable_get('menu_images_image_style_default', 'menu_image');
  }

  if (!isset($options['attributes'])) {
    $options['attributes'] = array();
  }
  if (!isset($options['attributes']['class'])) {
    $options['attributes']['class'] = array();
  }

  $classes = array();
  $classes[] = "menu_image";
  $classes[] = "menu-" . $form_state['values']['mlid'];
  if ($options['menu_image']['enable'] && !empty($options['menu_image']['path']) && file_exists($options['menu_image']['path'])) {
    foreach ($classes as $class) {
      if (!in_array($class, $options['attributes']['class'])) {
        $options['attributes']['class'][] = $class;
      }
    }
  }

  if (empty($options['attributes']['class'])) {
    unset($options['attributes']['class']);
  }

  db_update('menu_links')
  ->fields(array(
    'options' => serialize($options),
  ))
  ->condition('mlid', $form_state['values']['mlid'])
  ->execute();

  // Regenerate the css file
  //menu_images_css_generate();
}

/**
 * Implements hook_init().
 */
function menu_images_init() {
  drupal_add_css('public://css/menu_images.css');
}

/**
 * Build the menu_image's settings form
 *
 * @return a form array
 */
function menu_images_admin_settings($form, &$form_state) {
  $form['menu_images_default_image'] = array(
    '#type' => 'textfield',
    '#title' => t('Image path'),
    '#default_value' => variable_get('menu_images_default_image', drupal_get_path('module', 'menu_images') . '/images/default_image.png'),
    '#description' => t('A Drupal path to the image or image to use as a default.'),
    '#required' => FALSE,
  );

  $options = array();
  foreach (image_styles() as $pid => $preset) {
    $options[$preset['name']] = $preset['name'];
  }

  if (!empty($options)) {
    $form['menu_images_image_style_default'] = array(
      '#type' => 'select',
      '#title' => t('Image default style'),
      '#default_value' => variable_get('menu_images_image_style_default'),
      '#description' => t('Choose a default !link to be used for menu images. This setting can be overwritten per menu item.', array('!link' => l(t('Image style'), 'admin/config/media/image-styles'))),
      '#required' => FALSE,
      '#options' => $options,
    );
  }

  $form['menu_images_image_folder'] = array(
    '#type' => 'textfield',
    '#title' => t('Image folder'),
    '#default_value' => variable_get('menu_images_image_folder', 'menu_images'),
    '#description' => t('The name of the files directory in which the new uploaded images will be stored. This folder will be created in the files directory'),
    '#required' => FALSE,
  );
  $form['menu_images_position'] = array(
    '#type' => 'select',
    '#title' => t('Position'),
    '#default_value' => variable_get('menu_images_position', 'left'),
    '#options' => array(
      'right' => t('right'),
      'left' => t('left'),
    ),
    '#required' => FALSE,
  );
  $form['menu_images_hide_titles'] = array(
    '#type' => 'checkbox',
    '#title' => t('Hide menu titles if image is present'),
    '#default_value' => variable_get('menu_images_hide_titles', FALSE),
    '#description' => t('Check this to hide menu titles and display only the image, if an image is configured. You will need to clear the theme registry cache after changing this option for it to take effect.'),
  );
  return system_settings_form($form);
}

/**
 * Implements hook_image_default_styles().
 * Define the default menu_images image style.
 */
//function menu_images_image_default_styles() {
//  $styles = array();
//
//  $styles['menu_image'] = array(
//    'effects' => array(
//      array(
//        'name' => 'image_scale',
//        'data' => array('width' => 45, 'height' => 45, 'upscale' => 1),
//        'weight' => 0,
//      ),
//    )
//  );
//
//  return $styles;
//}

/**
 * Build CSS based on menu IDs
 *
 * @return A string with the CSS
 */
//function menu_images_css_generate() {
//
//  $css = "";
//  $result = db_query("SELECT mlid, options FROM {menu_links}");
//  $pos = variable_get('menu_images_position', 'left');
//
//  foreach ($result as $item) {
//    $options = unserialize($item->options);
//
//    if (isset($options['menu_image']) && $options['menu_image']['enable'] && !empty($options['menu_image']['path']) && file_exists($options['menu_image']['path'])) {
//
//      $image_path = $options['menu_image']['path'];
//      $image_style = (isset($options['menu_image']['image_style']) && !empty($options['menu_image']['image_style'])) ? $options['menu_image']['image_style'] : NULL;
//
//      if ($image_style) {
//        $source_uri = $image_path;
//        $image_path = image_style_path($image_style, $source_uri);
//
//        if (!file_exists($image_path)) {
//          image_style_create_derivative(image_style_load($image_style), $source_uri, $image_path);
//        }
//      }
//
//      // Retrieve the image dimensions
//      $info = image_get_info($image_path);
//      $image_url = file_create_url($image_path);
//
//      // Support private filesystem
//      $css .= theme('menu_images_css_item', array('mlid' => $item->mlid, 'path' => $image_url, 'size' => $info['width'], 'pos' => $pos));
//    }
//  }
//  if (!empty($css)) {
//    $csspath = 'public://css';
//    file_prepare_directory($csspath, FILE_CREATE_DIRECTORY);
//    file_unmanaged_save_data($css, $csspath . '/menu_images.css', FILE_EXISTS_REPLACE);	
//  }
//}

/**
 * Implements hook_theme().
 */
//function menu_images_theme() {
//  return array(
//    'menu_images_css_item' => array(
//      'variables' => array('mlid' => NULL, 'path' => NULL, 'size' => NULL, 'pos' => NULL),
//      'template' => 'menu_images_css_item',
//    ),
//  );
//}

/**
 * Implements hook_flush_caches().
 */
//function menu_images_flush_caches() {
//  menu_images_css_generate();
//}

/**
 * Returns the file directory path in which both the CSS file and the images are stored.
 */
function menu_images_directory_path($full = TRUE) {
  $path = variable_get('menu_images_image_folder', 'menu_images');
  $path_full = 'public://' . $path;
  return ($full ? $path_full : $path);
}

/**
 * Override theme_menu_link - hide link titles if enabled.
 *
 * @param $variables
 *
 * @return string
 */
//function menu_image_menu_link($variables) {
//  $element = $variables['element'];
//  $sub_menu = '';
//
//  if ($element['#below']) {
//    $sub_menu = drupal_render($element['#below']);
//  }
//  $output = l($element['#title'], $element['#href'], $element['#localized_options']);
//  if (isset($element['#localized_options']['menu_image'])) {
//    if ($element['#localized_options']['menu_image']['enable'] == 1) {
//      $element['#attributes']['title'] = $element['#title'];
//      $output = l('', $element['#href'], $element['#localized_options']);
//    }
//  }
//  return '<li' . drupal_attributes($element['#attributes']) . '>' . $output . $sub_menu . "</li>\n";
//}
function menu_image_menu_link($variables) {
    dpm($variables);
  $element = $variables['element'];
  $menu_img = $element['#localized_options']['menu_image'];
  $sub_menu = '';
  
  // Get image info for image width and height
  $img_info = image_get_info($menu_img['path']);
  
  $output = l(theme_image(array(
                'path'       => $menu_img['path'],
                'width'      => $img_info['width'],
                'heigth'     => $img_info['height'],
                'alt'        => $element['#title'],
                'title'      => $element['#title'],
                'attributes' => array(),
            )
          ),$element['#href'],array('html' => TRUE));

  if ($element['#below']) {
    $sub_menu = drupal_render($element['#below']);
  }
  $output .= l($element['#title'], $element['#href'], $element['#localized_options']);
//  if (isset($element['#localized_options']['menu_image'])) {
//    if ($element['#localized_options']['menu_image']['enable'] == 1) {
//      $element['#attributes']['title'] = $element['#title'];
//      $output = l('', $element['#href'], $element['#localized_options']);
//    }
//  }
  return '<li' . drupal_attributes($element['#attributes']) . '>' . $output . $sub_menu . "</li>\n";
}

/**
 * Override theme_link - hide link titles if enabled.
 *
 * @param $variables
 *
 * @return string
 */
function menu_image_link($variables) {
  if (isset($variables['options']['menu_image'])) {
    if ($variables['options']['menu_image']['enable'] == 1) {
      $variables['options']['attributes']['title'] = $variables['text'];
      return '<a href="' . check_plain(url($variables['path'], $variables['options'])) . '"' . drupal_attributes($variables['options']['attributes']) . '></a>';
    }
  }
  return '<a href="' . check_plain(url($variables['path'], $variables['options'])) . '"' . drupal_attributes($variables['options']['attributes']) . '>' . ($variables['options']['html'] ? $variables['text'] : check_plain($variables['text'])) . '</a>';
}
